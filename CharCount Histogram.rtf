{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red89\green138\blue67;\red23\green23\blue23;\red202\green202\blue202;
\red212\green214\blue154;\red167\green197\blue152;\red70\green137\blue204;\red140\green211\blue254;\red183\green111\blue179;
}
{\*\expandedcolortbl;;\cssrgb\c41569\c60000\c33333;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c66667;\cssrgb\c70980\c80784\c65882;\cssrgb\c33725\c61176\c83922;\cssrgb\c61176\c86275\c99608;\cssrgb\c77255\c52549\c75294;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ; Intro paragraph: In this code, we analyze a string and count how many of each symbol is in the string.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; Once we count the symbols, we add the counts to a histogram by letter or '@' for additional characters.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; We then print the histogram which contains the total count of each symbol in string. This is done by\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; bit shifting the value in each of the histogram addresses and printing a character for every four bits\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; shifted, which we keep track of by using a loop. We print four bits to create a hex value and then repeat\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; by incrementing to the next line and printing a hex value for each symbol.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; The code given to you here implements the histogram calculation that\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; we developed in class.  In programming lab, we will add code that\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; prints a number in hexadecimal to the monitor.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; Your assignment for this program is to combine these two pieces of\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; code to print the histogram to the monitor.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; If you finish your program,\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    ** commit a working version to your repository  **\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    ** (and make a note of the repository version)! **\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3  \cb1 \
\cb3  \cb1 \
\cb3    \cf5 \strokec5 .ORIG\cf4 \strokec4    \cf6 \strokec6 x3000\cf4 \strokec4        \cf2 \strokec2 ; starting address is x3000\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; Count the occurrences of each letter (A to Z) in an ASCII string\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; terminated by a NUL character.  Lower case and upper case should\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; be counted together, and a count also kept of all non-alphabetic\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; characters (not counting the terminal NUL).\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; The string starts at x4000.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; The resulting histogram (which will NOT be initialized in advance)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; should be stored starting at x3F00, with the non-alphabetic count\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; at x3F00, and the count for each letter in x3F01 (A) through x3F1A (Z).\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; table of register use in this part of the code\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    R0 holds a pointer to the histogram (x3F00)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    R1 holds a pointer to the current position in the string\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;       and as the loop count during histogram initialization\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    R2 holds the current character being counted\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;       and is also used to point to the histogram entry\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    R3 holds the additive inverse of ASCII '@' (xFFC0)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    R4 holds the difference between ASCII '@' and 'Z' (xFFE6)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    R5 holds the difference between ASCII '@' and '`' (xFFE0)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;    R6 is used as a temporary register\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3  \cb1 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 ,HIST_ADDR         \cf2 \strokec2 ; point R0 to the start of the histogram\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3    \cf2 \strokec2 ; fill the histogram with zeroes\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R6\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; put a zero into R6\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R1\cf4 \strokec4 ,NUM_BINS      \cf2 \strokec2 ; initialize loop count to 27\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R0\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; copy start of histogram into R2\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3    \cf2 \strokec2 ; loop to fill histogram starts here\cf4 \cb1 \strokec4 \
\cb3 HFLOOP  \cf7 \strokec7 STR\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; write a zero into histogram\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf6 \strokec6 #1\cf4 \strokec4         \cf2 \strokec2 ; point to next histogram entry\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R1\cf4 \strokec4 ,\cf8 \strokec8 R1\cf4 \strokec4 ,#-\cf6 \strokec6 1\cf4 \strokec4        \cf2 \strokec2 ; decrement loop count\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRp\cf4 \strokec4  HFLOOP      \cf2 \strokec2 ; continue until loop count reaches zero\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3    \cf2 \strokec2 ; initialize R1, R3, R4, and R5 from memory\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R3\cf4 \strokec4 ,NEG_AT        \cf2 \strokec2 ; set R3 to additive inverse of ASCII '@'\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R4\cf4 \strokec4 ,AT_MIN_Z      \cf2 \strokec2 ; set R4 to difference between ASCII '@' and 'Z'\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R5\cf4 \strokec4 ,AT_MIN_BQ     \cf2 \strokec2 ; set R5 to difference between ASCII '@' and '`'\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R1\cf4 \strokec4 ,STR_START     \cf2 \strokec2 ; point R1 to start of string\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3    \cf2 \strokec2 ; the counting loop starts here\cf4 \cb1 \strokec4 \
\cb3 COUNTLOOP\cb1 \
\cb3    \cf7 \strokec7 LDR\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R1\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; read the next character from the string\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRz\cf4 \strokec4  PRINT_HIST      \cf2 \strokec2 ; found the end of the string\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R3\cf4 \strokec4         \cf2 \strokec2 ; subtract '@' from the character\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRp\cf4 \strokec4  AT_LEAST_A      \cf2 \strokec2 ; branch if > '@', i.e., >= 'A'\cf4 \cb1 \strokec4 \
\cb3 NON_ALPHA\cb1 \
\cb3    \cf7 \strokec7 LDR\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R0\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; load the non-alpha count\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R6\cf4 \strokec4 ,\cf6 \strokec6 #1\cf4 \strokec4         \cf2 \strokec2 ; add one to it\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 STR\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R0\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; store the new non-alpha count\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnzp\cf4 \strokec4  GET_NEXT      \cf2 \strokec2 ; branch to end of conditional structure\cf4 \cb1 \strokec4 \
\cb3 AT_LEAST_A\cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R4\cf4 \strokec4         \cf2 \strokec2 ; compare with 'Z'\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRp\cf4 \strokec4  MORE_THAN_Z     \cf2 \strokec2 ; branch if > 'Z'\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ; note that we no longer need the current character\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; so we can reuse R2 for the pointer to the correct\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; histogram entry for incrementing\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 ALPHA   \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R0\cf4 \strokec4     \cf2 \strokec2 ; point to correct histogram entry\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LDR\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; load the count\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R6\cf4 \strokec4 ,\cf6 \strokec6 #1\cf4 \strokec4         \cf2 \strokec2 ; add one to it\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 STR\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4         \cf2 \strokec2 ; store the new count\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnzp\cf4 \strokec4  GET_NEXT      \cf2 \strokec2 ; branch to end of conditional structure\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ; subtracting as below yields the original character minus '`'\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 MORE_THAN_Z\cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R5\cf4 \strokec4         \cf2 \strokec2 ; subtract '`' - '@' from the character\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnz\cf4 \strokec4  NON_ALPHA      \cf2 \strokec2 ; if <= '`', i.e., < 'a', go increment non-alpha\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R2\cf4 \strokec4 ,\cf8 \strokec8 R4\cf4 \strokec4         \cf2 \strokec2 ; compare with 'z'\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnz\cf4 \strokec4  ALPHA      \cf2 \strokec2 ; if <= 'z', go increment alpha count\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnzp\cf4 \strokec4  NON_ALPHA     \cf2 \strokec2 ; otherwise, go increment non-alpha\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3 GET_NEXT\cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R1\cf4 \strokec4 ,\cf8 \strokec8 R1\cf4 \strokec4 ,\cf6 \strokec6 #1\cf4 \strokec4         \cf2 \strokec2 ; point to next character in string\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnzp\cf4 \strokec4  COUNTLOOP     \cf2 \strokec2 ; go to start of counting loop\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3  \cb1 \
\cb3  \cb1 \
\cb3 PRINT_HIST\cb1 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ; R0 contains the temporary characters to output, as well as the intermediate calculated values to get there\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; R1 is a counter initialized to 27 and decremented for each histogram row printed\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; R2 contains the memory address of each letter location in the histogram.\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; R3 contains the histogram addresses\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; R4 holds the current value inside each histogram address to be bit shifted through\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; R5 is a counter initialized to 4 and decremented each time four bits are incremented through\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; R6 is a counter initialized to 4 and decremented each time a bit is passed\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3  \cb1 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ; you will need to insert your code to print the histogram here\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3  \cb1 \
\cb3    \cf2 \strokec2 ;Intitialize Registers\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R1\cf4 \strokec4 , \cf8 \strokec8 R1\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 , \cf8 \strokec8 R2\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R3\cf4 \strokec4 , \cf8 \strokec8 R3\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R4\cf4 \strokec4 , \cf8 \strokec8 R4\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R5\cf4 \strokec4 , \cf8 \strokec8 R5\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 , \cf8 \strokec8 R6\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3    \cf2 \strokec2 ;Load in relevant values to registers\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R1\cf4 \strokec4 , NUM_BINS\cb1 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 , START_LABEL\cb1 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R3\cf4 \strokec4 , HIST_ADDR\cb1 \
\cb3  \cb1 \
\cb3 PRINT_LOOP\cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 , \cf8 \strokec8 R2\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \strokec4  \cf2 \strokec2 ;printing out current ASCII value\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 OUT\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 , SPACE_CHAR \cf2 \strokec2 ;printing out space character\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 OUT\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 , \cf8 \strokec8 R0\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \strokec4  \cf2 \strokec2 ;clear R0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R5\cf4 \strokec4 , \cf8 \strokec8 R5\cf4 \strokec4 , \cf6 \strokec6 #4\cf4 \strokec4  \cf2 \strokec2 ;initialize outer 4 bit counter\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LDR\cf4 \strokec4  \cf8 \strokec8 R4\cf4 \strokec4 , \cf8 \strokec8 R3\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \strokec4  \cf2 \strokec2 ;Load value in current histogram address into R4\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3 FOUR_LOOP\cb1 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 ,\cf8 \strokec8 R0\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4  \cf2 \strokec2 ;Clear register R0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 AND\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R6\cf4 \strokec4 ,\cf6 \strokec6 #0\cf4 \strokec4  \cf2 \strokec2 ;Clear register R6\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 ,\cf8 \strokec8 R6\cf4 \strokec4 ,\cf6 \strokec6 #4\cf4 \strokec4  \cf2 \strokec2 ;initialize inner 4 bit counter\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3 HEX_LOOP\cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 , \cf8 \strokec8 R0\cf4 \strokec4 , \cf8 \strokec8 R0\cf4 \strokec4  \cf2 \strokec2 ;Bit shift register holding character values\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R4\cf4 \strokec4 , \cf8 \strokec8 R4\cf4 \strokec4 , \cf6 \strokec6 #0\cf4 \strokec4  \cf2 \strokec2 ;Set condition codes based on value in histogram address\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRzp\cf4 \strokec4  NON_NEGATIVE \cf2 \strokec2 ;Skip one line based on whether bit to be used is 1 or 0\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 , \cf8 \strokec8 R0\cf4 \strokec4 , \cf6 \strokec6 #1\cf4 \strokec4  \cf2 \strokec2 ;If R4 isnegative, put the corresponding bit one in the register\cf4 \cb1 \strokec4 \
\cb3 NON_NEGATIVE\cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R4\cf4 \strokec4 , \cf8 \strokec8 R4\cf4 \strokec4 , \cf8 \strokec8 R4\cf4 \strokec4  \cf2 \strokec2 ;Bit shift register holding value in histogram address\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 , \cf8 \strokec8 R6\cf4 \strokec4 , #-\cf6 \strokec6 1\cf4 \strokec4  \cf2 \strokec2 ;Decrement inner loop counter\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnp\cf4 \strokec4  HEX_LOOP \cf2 \strokec2 ;loop four times by going back to HEX_LOOP\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3  \cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 , \cf8 \strokec8 R0\cf4 \strokec4 , #-\cf6 \strokec6 9\cf4 \strokec4  \cf2 \strokec2 ;Subtracting 9 from R0 and adding to R6\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRp\cf4 \strokec4   LETTER \cf2 \strokec2 ;If R0 - 9 is positive, assign letter offset\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnzp\cf4 \strokec4  NUMBER \cf2 \strokec2 ;else assign number offset\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3 PRINT_HEX\cb1 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 , \cf8 \strokec8 R0\cf4 \strokec4 , \cf8 \strokec8 R6\cf4 \strokec4  \cf2 \strokec2 ;adding corresponding offset to R0\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 OUT\cf4 \strokec4  \cf2 \strokec2 ;printing out\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R5\cf4 \strokec4 , \cf8 \strokec8 R5\cf4 \strokec4 , #-\cf6 \strokec6 1\cf4 \strokec4  \cf2 \strokec2 ;decrementing the outer loop counter\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnp\cf4 \strokec4  FOUR_LOOP \cf2 \strokec2 ;loop four times by going back to FOUR_LOOP\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R3\cf4 \strokec4 , \cf8 \strokec8 R3\cf4 \strokec4 , \cf6 \strokec6 #1\cf4 \strokec4  \cf2 \strokec2 ;incrementing the histogram address\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R2\cf4 \strokec4 , \cf8 \strokec8 R2\cf4 \strokec4 , \cf6 \strokec6 #1\cf4 \strokec4  \cf2 \strokec2 ;incrementing the character address\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R0\cf4 \strokec4 , NEW_LINE \cf2 \strokec2 ;Print new line\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 OUT\cf4 \cb1 \strokec4 \
\cb3    \cf7 \strokec7 ADD\cf4 \strokec4  \cf8 \strokec8 R1\cf4 \strokec4 , \cf8 \strokec8 R1\cf4 \strokec4 , #-\cf6 \strokec6 1\cf4 \strokec4  \cf2 \strokec2 ;Decrement outermost counter for 27 lines\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnp\cf4 \strokec4  PRINT_LOOP \cf2 \strokec2 ;Loop 27 times and end once zero\cf4 \cb1 \strokec4 \
\cb3 PROGRAM_END\cb1 \
\cb3    \cf9 \strokec9 HALT\cf4 \strokec4  \cf2 \strokec2 ;Halt program\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3 LETTER\cb1 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 , LTR_OFFSET \cf2 \strokec2 ;Load letter offset into R6\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnzp\cf4 \strokec4  PRINT_HEX \cf2 \strokec2 ;Branch to PRINT_HEX\cf4 \cb1 \strokec4 \
\cb3 NUMBER\cb1 \
\cb3    \cf7 \strokec7 LD\cf4 \strokec4  \cf8 \strokec8 R6\cf4 \strokec4 , NUM_OFFSET \cf2 \strokec2 ;Load number offset into R6\cf4 \cb1 \strokec4 \
\cb3    \cf9 \strokec9 BRnzp\cf4 \strokec4  PRINT_HEX \cf2 \strokec2 ;Branch to PRINT_HEX\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ; do not forget to write a brief description of the approach/algorithm\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; for your implementation, list registers used in this part of the code,\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; and provide sufficient comments\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3  \cb1 \
\cb3  \cb1 \
\cb3  \cb1 \
\cb3 DONE    \cf9 \strokec9 HALT\cf4 \strokec4             \cf2 \strokec2 ; done\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ; the data needed by the program\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 NUM_BINS    \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 #27\cf4 \strokec4    \cf2 \strokec2 ; 27 loop iterations\cf4 \cb1 \strokec4 \
\cb3 NEG_AT      \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 xFFC0\cf4 \strokec4  \cf2 \strokec2 ; the additive inverse of ASCII '@'\cf4 \cb1 \strokec4 \
\cb3 AT_MIN_Z    \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 xFFE6\cf4 \strokec4  \cf2 \strokec2 ; the difference between ASCII '@' and 'Z'\cf4 \cb1 \strokec4 \
\cb3 AT_MIN_BQ   \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 xFFE0\cf4 \strokec4  \cf2 \strokec2 ; the difference between ASCII '@' and '`'\cf4 \cb1 \strokec4 \
\cb3 HIST_ADDR   \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 x3F00\cf4 \strokec4  \cf2 \strokec2 ; histogram starting address\cf4 \cb1 \strokec4 \
\cb3 STR_START   \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 x4000\cf4 \strokec4  \cf2 \strokec2 ; string starting address\cf4 \cb1 \strokec4 \
\cb3 START_LABEL \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 x0040\cf4 \strokec4  \cf2 \strokec2 ; memory address stores ascii value for @\cf4 \cb1 \strokec4 \
\cb3 SPACE_CHAR  \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 x0020\cf4 \strokec4  \cf2 \strokec2 ; memory address stores ascii value for space\cf4 \cb1 \strokec4 \
\cb3 NEW_LINE    \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 x000A\cf4 \strokec4  \cf2 \strokec2 ; memory address stores ascii value for new line\cf4 \cb1 \strokec4 \
\cb3 NUM_OFFSET  \cf5 \strokec5 .FILL\cf4 \strokec4  \cf6 \strokec6 x0030\cf4 \strokec4  \cf2 \strokec2 ; memory address stores number offset\cf4 \cb1 \strokec4 \
\cb3 LTR_OFFSET  \cf5 \strokec5 .FIll\cf4 \strokec4  \cf6 \strokec6 #55\cf4 \strokec4    \cf2 \strokec2 ; memory address stores letter offset\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3  \cb1 \
\cb3  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 ; for testing, you can use the lines below to include the string in this\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; program...\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; STR_START .FILL STRING    ; string starting address\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 ; STRING        .STRINGZ "This is a test of the counting frequency code.  AbCd...WxYz."\cf4 \cb1 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3  \cb1 \
\cb3  \cb1 \
\cb3  \cb1 \
\cb3    \cf2 \strokec2 ; the directive below tells the assembler that the program is done\cf4 \cb1 \strokec4 \
\cb3    \cf2 \strokec2 ; (so do not write any code below it!)\cf4 \cb1 \strokec4 \
\cb3  \cb1 \
\cb3    \cf5 \strokec5 .END\cf4 \cb1 \strokec4 \
\
}